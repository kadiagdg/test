# anonymization_module.py
import os
import json
import pandas as pd
from cryptography.fernet import Fernet
import hmac
import hashlib
from dotenv import load_dotenv, set_key, dotenv_values

# Chemin vers le fichier .env
env_file = ".env"

# Vérifier si le fichier .env existe
if not os.path.exists(env_file):
    # Créer un fichier .env vide
    with open(env_file, "w") as f:
        pass

# Charger les variables d'environnement
env_vars = dotenv_values(env_file)

# Vérifier si les clés existent dans .env
if "FERNET_KEY" not in env_vars or "HMAC_KEY" not in env_vars:
    # Générer une clé Fernet
    fernet_key = Fernet.generate_key().decode()  # Convertir en chaîne pour le stockage

    # Générer une clé HMAC
    hmac_key = os.urandom(32).hex()  # Générer 32 bytes aléatoires et convertir en hexadécimal

    # Enregistrer les clés dans .env
    set_key(env_file, "FERNET_KEY", fernet_key)
    set_key(env_file, "HMAC_KEY", hmac_key)

    print("Nouvelles clés générées et enregistrées dans .env.")
else:
    print("Les clés existent déjà dans .env.")

# Charger les variables d'environnement
load_dotenv()

# Récupérer les clés
fernet_key = os.getenv("FERNET_KEY").encode()  # Convertir en bytes pour Fernet
hmac_key = bytes.fromhex(os.getenv("HMAC_KEY"))  # Convertir en bytes pour HMAC

# Initialiser Fernet avec la clé
cipher_suite = Fernet(fernet_key)

# Fonction pour chiffrer un champ avec Fernet
def encrypt_symmetric(data):
    return cipher_suite.encrypt(data.encode()).decode()

# Fonction pour déchiffrer un champ avec Fernet
def decrypt_symmetric(data):
    return cipher_suite.decrypt(data.encode()).decode()

# Fonction pour hacher un champ avec HMAC
def anonymize_hash(data):
    hmac_hash = hmac.new(hmac_key, data.encode(), hashlib.sha256)
    return hmac_hash.hexdigest()[:10]  # Retourne les 10 premiers caractères du hachage

# Fonction pour anonymiser un DataFrame
def anonymize_dataframe(df):
    # Créer des tables de correspondance pour les colonnes hachées
    mapping_tables = {
        "nc": {},
        "id_cl": {},
        "code_ag": {},
    }

    # Anonymisation des données
    df_anonymized = df.copy()

    # Hacher les colonnes nc, id_cl et code_ag
    for column in ["nc", "id_cl", "code_ag"]:
        for value in df[column].unique():
            mapping_tables[column][value] = anonymize_hash(value)
        df_anonymized[column] = df_anonymized[column].map(mapping_tables[column])

    # Chiffrer les colonnes nom_cl et nom_ag
    df_anonymized["nom_cl"] = df_anonymized["nom_cl"].apply(encrypt_symmetric)
    df_anonymized["nom_ag"] = df_anonymized["nom_ag"].apply(encrypt_symmetric)

    # Sauvegarder les tables de correspondance dans un fichier chiffré
    with open("mapping_tables_encrypted.json", "wb") as f:
        encrypted_mapping = cipher_suite.encrypt(json.dumps(mapping_tables).encode())
        f.write(encrypted_mapping)

    return df_anonymized

# Fonction de désanonymisation encapsulée
def get_deanonymization_function():
    # Charger et déchiffrer les tables de correspondance
    with open("mapping_tables_encrypted.json", "rb") as f:
        encrypted_mapping = f.read()
        decrypted_mapping = cipher_suite.decrypt(encrypted_mapping).decode()
        mapping_tables = json.loads(decrypted_mapping)

    # Fonction interne pour désanonymiser un DataFrame
    def deanonymize_dataframe(df_anonymized):
        df_deanonymized = df_anonymized.copy()

        # Déchiffrer les colonnes nom_cl et nom_ag
        df_deanonymized["nom_cl"] = df_deanonymized["nom_cl"].apply(decrypt_symmetric)
        df_deanonymized["nom_ag"] = df_deanonymized["nom_ag"].apply(decrypt_symmetric)

        # Désanonymiser les colonnes nc, id_cl et code_ag
        for column in ["nc", "id_cl", "code_ag"]:
            reverse_mapping_table = {v: k for k, v in mapping_tables[column].items()}
            df_deanonymized[column] = df_deanonymized[column].map(reverse_mapping_table)

        return df_deanonymized

    return deanonymize_dataframe

# Charger les données brutes
df_raw = df.copy()#pd.read_csv("raw_data.csv")

# Anonymiser les données
df_anonymized = anonymize_dataframe(df_raw)

# Sauvegarder les données anonymisées pour les Data Analysts
df_anonymized.to_csv("../anonymized_data.csv",sep=';', index=False)

print("Données anonymisées sauvegardées dans anonymized_data.csv.")

-----------------------------------------

# data_analyst_script.py
import pandas as pd

# Charger les données anonymisées
df_anonymized = pd.read_csv("anonymized_data.csv")

# Afficher les données anonymisées
print("DataFrame Anonymisé :")
print(df_anonymized)

# Les Data Analysts effectuent leurs analyses sur les données anonymisées
# ...



-----------------------------------------
import sys
import os

# Obtenir le chemin absolu du dossier secure_folder
secure_folder_path = os.path.join(os.getcwd(), "secure_folder")

# Ajouter le chemin à sys.path
if secure_folder_path not in sys.path:
    sys.path.append(secure_folder_path)

# Vérifier que le chemin a été ajouté
print("Chemin ajouté :", secure_folder_path)
print("Contenu du dossier :", os.listdir(secure_folder_path))

# Importer la fonction depuis le module
try:
    from anonymization_module import get_deanonymization_function
    print("Importation réussie !")
except ImportError as e:
    print("Erreur lors de l'importation :", e)
    sys.exit(1)  # Quitter le script en cas d'erreur

# Fonction de désanonymisation
deanonymize_dataframe = get_deanonymization_function()

# Exemple de requête API
def restitute_data(df_anonymized):
    # Désanonymiser les données
    df_deanonymized = deanonymize_dataframe(df_anonymized)
    return df_deanonymized

# Charger les données anonymisées
df_anonymized = pd.read_csv("../anonymized_data.csv",sep=';')

# Utilisation dans l'API
df_deanonymized = restitute_data(df_anonymized)

# Afficher le résultat
print("DataFrame Désanonymisé :")
print(df_deanonymized)
