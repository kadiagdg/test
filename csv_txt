import pandas as pd
import glob
import os

def concat2(dossier):
    """
    Concat√®ne les fichiers CSV (s√©parateur ',') et TXT (s√©parateur ';') d'un dossier,
    filtre les colonnes sp√©cifi√©es et supprime les doublons.
    
    Args:
        dossier (str): Nom du sous-dossier dans 'data/input/' √† traiter
    
    Returns:
        tuple: (head du DataFrame, message de statut)
    """
    try:
        # Construction des chemins
        input_path = os.path.join('data', 'input', dossier)
        save_path = os.path.join('data', 'output')
        
        # V√©rification des r√©pertoires
        if not os.path.exists(input_path):
            raise FileNotFoundError(f"Le dossier {input_path} n'existe pas")
        
        os.makedirs(save_path, exist_ok=True)
        
        # Recherche des fichiers
        csv_files = glob.glob(os.path.join(input_path, "*.csv"))
        txt_files = glob.glob(os.path.join(input_path, "*.txt"))
        all_files = csv_files + txt_files
        
        if not all_files:
            raise FileNotFoundError("Aucun fichier .csv ou .txt trouv√©")
        
        print("Fichiers trouv√©s:", all_files)
        
        # Lecture et concat√©nation des fichiers
        dfs = []
        for f in all_files:
            try:
                sep = "," if f.endswith(".csv") else ";"
                df = pd.read_csv(f, sep=sep, usecols=["Party_id", "Host_Account_Mar"])
                dfs.append(df)
            except Exception as e:
                print(f"Erreur lors de la lecture de {f}: {str(e)}")
                continue
        
        if not dfs:
            raise ValueError("Aucun fichier valide n'a pu √™tre lu")
        
        df_result = pd.concat(dfs, ignore_index=True)
        
        # Nettoyage des donn√©es
        df_result = df_result.astype("string")
        df_result = df_result[["Party_id", "Host_Account_Mar"]].drop_duplicates()
        
        # Sauvegarde
        output_file = os.path.join(save_path, "resultat_concatenation.csv")
        df_result.to_csv(output_file, sep=',', index=False)
        
        print("Traitement termin√© avec succ√®s. Shape:", df_result.shape)
        return df_result.head(), "Succ√®s"
    
    except Exception as e:
        print("Erreur:", str(e))
        return None, f"Erreur: {str(e)}"

_____________________________________________________________________________________________

import pandas as pd
import glob
import os

def traiter_fichiers(dossier):
    """
    Traite chaque fichier CSV (s√©parateur ',') et TXT (s√©parateur ';') d'un dossier individuellement,
    filtre les colonnes sp√©cifi√©es, supprime les doublons et sauvegarde les r√©sultats.
    
    Args:
        dossier (str): Nom du sous-dossier dans 'data/input/' √† traiter
    
    Returns:
        dict: Dictionnaire avec les stats de traitement {nom_fichier: (head, statut)}
    """
    try:
        # Construction des chemins
        input_path = os.path.join('data', 'input', dossier)
        save_path = os.path.join('data', 'output', dossier)
        
        # V√©rification des r√©pertoires
        if not os.path.exists(input_path):
            raise FileNotFoundError(f"Le dossier {input_path} n'existe pas")
        
        os.makedirs(save_path, exist_ok=True)
        
        # Recherche des fichiers
        csv_files = glob.glob(os.path.join(input_path, "*.csv"))
        txt_files = glob.glob(os.path.join(input_path, "*.txt"))
        all_files = csv_files + txt_files
        
        if not all_files:
            raise FileNotFoundError("Aucun fichier .csv ou .txt trouv√©")
        
        print(f"{len(all_files)} fichiers trouv√©s dans {input_path}")
        
        r√©sultats = {}
        
        for fichier in all_files:
            try:
                # D√©terminer le s√©parateur
                sep = "," if fichier.endswith(".csv") else ";"
                nom_fichier = os.path.basename(fichier)
                
                # Lecture du fichier
                df = pd.read_csv(fichier, sep=sep, usecols=["Party_id", "Host_Account_Mar"])
                
                # Traitement
                df = df.astype("string")
                df = df.drop_duplicates()
                
                # Sauvegarde
                nom_sortie = f"traite_{nom_fichier}"
                chemin_sortie = os.path.join(save_path, nom_sortie)
                df.to_csv(chemin_sortie, sep=',', index=False)
                
                # Stocker le r√©sultat
                r√©sultats[nom_fichier] = (df.head(), "Succ√®s")
                print(f"{nom_fichier} trait√© avec succ√®s -> {chemin_sortie}")
                
            except Exception as e:
                msg_erreur = f"Erreur avec {os.path.basename(fichier)}: {str(e)}"
                print(msg_erreur)
                r√©sultats[os.path.basename(fichier)] = (None, msg_erreur)
                continue
        
        return r√©sultats
    
    except Exception as e:
        print("Erreur globale:", str(e))
        return {"Erreur globale": (None, str(e))}

____________________________________________________________________________________________________


# üìò RUNBOOK ‚Äì TRAITEMENT MANUEL DONN√âES

---

## 1Ô∏è‚É£ Informations G√©n√©rales

- **Nom du projet / flux de donn√©es :**
- **Propri√©taire :**
- **Date de cr√©ation :**
- **Derni√®re mise √† jour :**
- **Chemin de stockage / dossier partag√© :**

---

## 2Ô∏è‚É£ Objectif

- **Description :**
- **Source(s) :**
- **Destinataire(s) :**

---

## 3Ô∏è‚É£ Fichiers et Formats

- **Format(s) re√ßu(s) :**
- **Nom(s) de fichier attendus :**
- **R√©pertoire de r√©ception :**
- **R√©pertoire de d√©p√¥t final :**

---

## 4Ô∏è‚É£ Traitements effectu√©s

- **IDE utilis√© :**
- **Langage / Scripts :**
- **Description g√©n√©rale :**
  - Extraction, nettoyage, jointures, enrichissements, contr√¥les qualit√©, export.
- **R√©pertoire des scripts :**
- **Fr√©quence :**
- **Dur√©e approximative :**

---

## 5Ô∏è‚É£ √âtapes d‚Äôex√©cution d√©taill√©es

1. **T√©l√©charger le fichier source**  
   T√©l√©charger la pi√®ce jointe du mail ou copier depuis SecureShare/Share vers le dossier de travail.

2. **V√©rifier le fichier brut**  
   V√©rifier le format, la date, les colonnes, le volume.

3. **Ouvrir l‚ÄôIDE Python**  
   VSCode, PyCharm ou Jupyter Notebook.

4. **Ex√©cuter le script principal `01_extraction.py`**  
   - Charger le fichier brut.  
   - V√©rifier les logs d‚Äôimport.

5. **Ex√©cuter `02_nettoyage.py`**  
   - Nettoyage : doublons, valeurs manquantes, formats.  
   - V√©rifier le DataFrame interm√©diaire.

6. **Ex√©cuter `03_jointure.py`**  
   - Faire les jointures n√©cessaires avec d‚Äôautres sources.  
   - V√©rifier coh√©rence.

7. **Ex√©cuter `04_enrichissement.py`**  
   - Ajouter indicateurs, colonnes calcul√©es.  
   - V√©rifier le DataFrame final.

8. **Contr√¥ler le r√©sultat final**  
   V√©rifier le volume, les valeurs cl√©s, les formats.

9. **Exporter le fichier final**  
   Format : CSV, XLSX, Parquet.  
   Nom : `output_<date>.csv`.

10. **D√©poser ou envoyer le fichier final**  
   D√©poser sur Share/SecureShare ou envoyer par mail aux analystes.

11. **Mettre √† jour le journal de traitement**

---

## 6Ô∏è‚É£ V√©rifications √† faire

**Avant ex√©cution :**
- [x] Fichier source pr√©sent et valide ?
- [x] Scripts √† jour ?
- [X] Param√®tres corrects (chemins, variables) ?

**Pendant ex√©cution :**
- [ ] Les logs n‚Äôont pas d‚Äôerreurs ?
- [ ] V√©rifier les DataFrames interm√©diaires ?

**Apr√®s ex√©cution :**
- [ ] Fichier final conforme ?
- [ ] Bien transf√©r√© ou envoy√© ?

---

## 7Ô∏è‚É£ Proc√©dures en cas de probl√®me

**Probl√®mes fr√©quents :**
- Fichier manquant ou corrompu.
- Script en erreur (package, chemin, syntaxe).
- R√©sultat incomplet ou incoh√©rent.

**Que faire :**
1. V√©rifier le fichier brut.
2. Consulter les logs.
3. Ex√©cuter √©tape par √©tape.
4. Corriger le probl√®me.
5. Escalader √† : [Responsable]

---

## 8Ô∏è‚É£ Contacts

- **Responsable flux :**
- **Backup :**
- **Destinataire final :**

---

## 9Ô∏è‚É£ Journal des traitements

| Date | Fichier trait√© | √âtapes ex√©cut√©es | Remarques | OK ? | Envoy√© √† |
|------|----------------|------------------|-----------|------|----------|
| JJ/MM/AAAA | ventes_01072025.csv | extraction > nettoyage > jointure | RAS | ‚úÖ | analyste@exemple.com |

---

## üîó 1Ô∏è‚É£0Ô∏è‚É£ Liens & R√©pertoires

- üìÇ **R√©pertoire de r√©ception :**
- üìÇ **R√©pertoire de d√©p√¥t final :**
- üìÅ **R√©pertoire des scripts Python :**
- üìë **Documentation technique / README :**


